import pandas as pd
import numpy as np

temp_record = pd.read_csv('city_temperature.csv')
temp_record.fillna('None')
city_list = sorted(list(set(temp_record['City'])))
region_list = set(list(temp_record['Region']))
months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
years = [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,
         2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020]
north_america= list(set(temp_record['City'].loc[temp_record['Region']=='North America']))
europe = list(set(temp_record['City'].loc[temp_record['Region']=='Europe']))
asia = list(set(temp_record['City'].loc[temp_record['Region']=='Asia']))
africa = list(set(temp_record['City'].loc[temp_record['Region']=='Africa']))
scac = list(set(temp_record['City'].loc[temp_record['Region']=='South/Central America & Carribean']))
regions =[north_america, europe, asia, africa, scac]
region_string = ['north_america', 'europe', 'asia', 'africa', 'scac']


'''The following functions explore outlier information and counts by city or region. It is worth noting that they take considerable time as there is a great deal of 
iterating over lists and creating slices of the dataframe for mean/standard deviation analysis.'''

def find_temperature_outliers(city_input):
    """
    Argument: recieves a user input for the city of interest for outlier analysis across all time
    
    Output: returns a dataframe object for graphing or display."""
    if city_input not in city_list:
        print('Either the city of interes is not in the dataset, or it isn't correctly capitalized and spelled')
    else:
        full_outlier_dataframe = pd.DataFrame(columns=temp_record.columns)
        for city in [city_input]:
            for year in years:
                for month in months:
                    if year == 1995:
                        comparison_set = temp_record['AvgTemperature'].loc[temp_record['City'] == city].loc[temp_record['Year'] == 1995].loc[
                            temp_record['Month'] == month].values
                        comp_mean = np.mean(comparison_set)
                        comp_outlier_ub = comp_mean + np.std(comparison_set)*3
                        comp_outlier_lb = comp_mean - np.std(comparison_set)*3
                    else:
                        comparison_set = temp_record['AvgTemperature'].loc[temp_record['City'] == city].loc[temp_record['Year'] < year].loc[
                            temp_record['Month'] == month].values
                        comp_mean = np.mean(comparison_set)
                        comp_outlier_ub = comp_mean + np.std(comparison_set)*3
                        comp_outlier_lb = comp_mean - np.std(comparison_set)*3
                    upper_outliers = temp_record.loc[temp_record['City'] == city].loc[temp_record['Year'] == year].loc[
                            temp_record['Month'] == month].loc[temp_record['AvgTemperature'] > comp_outlier_ub]
                    lower_outliers = temp_record.loc[temp_record['City'] == city].loc[temp_record['Year'] == year].loc[
                            temp_record['Month'] == month].loc[temp_record['AvgTemperature'] < comp_outlier_lb]
                    full_outlier_dataframe = pd.concat([full_outlier_dataframe, upper_outliers,lower_outliers])
    return full_outlier_dataframe

'''The goal is to find which region had the largest propotion of instances of statistical outliers for city's daily 
average temperature in 2020 as calculated by 3 standard deviations above or below the historical monthly average for that
each city.'''
def regional_outlier_count(yyyy):
    yyyy = int(yyyy)
    transcript =[]
    for i in range(len(regions)):
        region = region_string[i]
        print(region)
        count = 0
        for city in regions[i]:
            print(city)
            for month in months:
                comparison_set = temp_record['AvgTemperature'].loc[temp_record['City'] == city].loc[temp_record[
                            'Month'] == month].values
                comp_mean = np.mean(comparison_set)
                comp_outlier_ub = comp_mean + np.std(comparison_set) * 3
                comp_outlier_lb = comp_mean - np.std(comparison_set) * 3
                upper_outliers = temp_record.loc[temp_record['City'] == city].loc[temp_record['Year'] == yyyy].loc[
                    temp_record['Month'] == month].loc[temp_record['AvgTemperature'] > comp_outlier_ub]
                lower_outliers = temp_record.loc[temp_record['City'] == city].loc[temp_record['Year'] == yyyy].loc[
                    temp_record['Month'] == month].loc[temp_record['AvgTemperature'] < comp_outlier_lb]
                count += (len(upper_outliers.index) + len(lower_outliers.index))
        transcript.append(f'{region}: {count/len(regions[i])}')
    return print('\n'.join(transcript))

regional_outlier_count(2020)

'''The output of regional_outlier_count()for 2020 was as follows:

north_america: 10
europe: 14
asia: 5
africa: 0
scac: 22

It appears as though there were a disproportionate amount of extreme weather days in South/Central America & the Carribean. 
Europe also had proportionately more hot days than North America. Africa was much closer to the mean and didn't have any statistical outliers.'''
